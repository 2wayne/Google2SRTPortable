/*
    This file is part of Google2SRT.

    Google2SRT is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    any later version.

    Google2SRT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Google2SRT.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 *
 * @author kom
 * @version "0.6, 08/11/13"
 */


import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.util.List;
import java.util.MissingResourceException;
import java.util.Vector;
import javax.swing.JFileChooser;



public class GUI extends javax.swing.JFrame {
    TableModel tablemodelTracks, tablemodelTargets;
    
    java.util.ResourceBundle bundle = GUI.getBundle();
    enum tIdioma {ca, en, es, it, pt_BR, zh_HanS, zh_HanT};
    
    private String defaultURL = "";
    // http://www.youtube.com/watch?v=c8RGPpcenZY (4 real tracks)
    // http://www.youtube.com/watch?v=XraeBDMm2PM (5 real tracks with names)
    // http://www.youtube.com/watch?v=IElqf-FCMs8 (EN ASR + EN track)
    // http://www.youtube.com/watch?v=UOfn1cTARrY (ES ASR)
    // http://www.youtube.com/watch?v=PH8JuizIXw8 (EN ASR + many real tracks)
    private String defaultFile = System.getProperty("user.home") +
                                    System.getProperty("file.separator") +
                                    "videotranscript.xml";
    private String defaultFileOut = System.getProperty("user.home") +
                                    System.getProperty("file.separator") +
                                    "output.srt";
    private final JFileChooser fc1 = new JFileChooser(),
                               fc2 = new JFileChooser();

    private List<List<NetSubtitle>> lSubsWithTranslations;
    
    private boolean msgInfileInvalidFormat, msgIOException;
    
    /** Creates new form gui */
    public GUI() {
        initComponents();

        this.lSubsWithTranslations = new Vector<List<NetSubtitle>>(); this.lSubsWithTranslations.add(new Vector<NetSubtitle>()); this.lSubsWithTranslations.add(new Vector<NetSubtitle>());

        this.setLanguage(bundle.getLocale().getLanguage());
        this.jtfInput.setText(defaultURL);
        this.jtfOutput.setText(defaultFileOut);
        
        fc1.addChoosableFileFilter(new XMLFilter());
        fc2.addChoosableFileFilter(new SRTFilter());
        
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        subsSource = new javax.swing.ButtonGroup();
        jpmContextual = new javax.swing.JPopupMenu();
        jmiCut = new javax.swing.JMenuItem();
        jmiCopy = new javax.swing.JMenuItem();
        jmiPaste = new javax.swing.JMenuItem();
        jrbURL = new javax.swing.JRadioButton();
        jrbXML = new javax.swing.JRadioButton();
        jtfInput = new javax.swing.JTextField();
        jtfOutput = new javax.swing.JTextField();
        jbutInput = new javax.swing.JButton();
        jbutOutput = new javax.swing.JButton();
        jbutConvert = new javax.swing.JButton();
        jspinnerDelay = new javax.swing.JSpinner();
        jlSubIn = new javax.swing.JLabel();
        jlSubOut = new javax.swing.JLabel();
        jlDelay = new javax.swing.JLabel();
        jbutSetLangCa = new javax.swing.JButton();
        jbutSetLangEs = new javax.swing.JButton();
        jbutSetLangEn = new javax.swing.JButton();
        jlStatus = new javax.swing.JLabel();
        jcbAll = new javax.swing.JCheckBox();
        jcbInvert = new javax.swing.JCheckBox();
        jbutSetLangPtBr = new javax.swing.JButton();
        jbutSetLangIt = new javax.swing.JButton();
        jcbTrackName = new javax.swing.JCheckBox();
        jTabbedPane = new javax.swing.JTabbedPane();
        jspTracks = new javax.swing.JScrollPane();
        jtTrackList = new javax.swing.JTable();
        jpTargets = new javax.swing.JPanel();
        jspTargets = new javax.swing.JScrollPane();
        jtTargetList = new javax.swing.JTable();
        jlSource = new javax.swing.JLabel();
        jcmbSource = new javax.swing.JComboBox();
        jbutSetLangZhHanS = new javax.swing.JButton();
        jbutSetLangZhHansT = new javax.swing.JButton();

        jmiCut.setAction(new javax.swing.text.DefaultEditorKit.CutAction());
        jpmContextual.add(jmiCut);

        jmiCopy.setAction(new javax.swing.text.DefaultEditorKit.CopyAction());
        jpmContextual.add(jmiCopy);

        jmiPaste.setAction(new javax.swing.text.DefaultEditorKit.PasteAction());
        jpmContextual.add(jmiPaste);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(java.util.ResourceBundle.getBundle("Bundle").getString("app.name") + " " + java.util.ResourceBundle.getBundle("Bundle").getString("app.version"));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setResizable(false);

        subsSource.add(jrbURL);
        jrbURL.setSelected(true);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Bundle"); // NOI18N
        jrbURL.setText(bundle.getString("GUI.jrbURL.text")); // NOI18N
        jrbURL.setToolTipText(bundle.getString("GUI.jrbURL.toolTipText")); // NOI18N
        jrbURL.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbURLItemStateChanged(evt);
            }
        });

        subsSource.add(jrbXML);
        jrbXML.setText(bundle.getString("GUI.jrbXML.text")); // NOI18N
        jrbXML.setToolTipText(bundle.getString("GUI.jrbXML.toolTipText")); // NOI18N
        jrbXML.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbXMLItemStateChanged(evt);
            }
        });

        jtfInput.setText(bundle.getString("GUI.jtfInput.text")); // NOI18N
        jtfInput.setToolTipText(bundle.getString("GUI.jtfInput.toolTipText")); // NOI18N
        jtfInput.setComponentPopupMenu(jpmContextual);
        jtfInput.setName("Input"); // NOI18N
        jtfInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtfInputMousePressed(evt);
            }
        });
        jtfInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtfInputFocusGained(evt);
            }
        });

        jtfOutput.setText(bundle.getString("GUI.jtfOutput.text")); // NOI18N
        jtfOutput.setToolTipText(bundle.getString("GUI.jtfOutput.toolTipText")); // NOI18N
        jtfOutput.setComponentPopupMenu(jpmContextual);
        jtfOutput.setName("FSortida"); // NOI18N
        jtfOutput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtfOutputMousePressed(evt);
            }
        });

        jbutInput.setText(bundle.getString("GUI.jbutInput.text")); // NOI18N
        jbutInput.setToolTipText(bundle.getString("GUI.jbutInput.toolTipText")); // NOI18N
        jbutInput.setName("bTriaEntrada"); // NOI18N
        jbutInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbutInputActionPerformed(evt);
            }
        });

        jbutOutput.setText(bundle.getString("GUI.jbutOutput.text")); // NOI18N
        jbutOutput.setToolTipText(bundle.getString("GUI.jbutOutput.toolTipText")); // NOI18N
        jbutOutput.setName("bTriaSortida"); // NOI18N
        jbutOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbutOutputActionPerformed(evt);
            }
        });

        jbutConvert.setText(bundle.getString("GUI.jbutConvert.text")); // NOI18N
        jbutConvert.setToolTipText(bundle.getString("GUI.jbutConvert.toolTipText")); // NOI18N
        jbutConvert.setName("Convertir"); // NOI18N
        jbutConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbutConvertActionPerformed(evt);
            }
        });

        jspinnerDelay.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(0.1d)));
        jspinnerDelay.setToolTipText(bundle.getString("GUI.jspinnerDelay.toolTipText")); // NOI18N
        jspinnerDelay.setName("Retard"); // NOI18N

        jlSubIn.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlSubIn.setLabelFor(jbutInput);
        jlSubIn.setText(bundle.getString("GUI.jlSubIn.text")); // NOI18N
        jlSubIn.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jlSubOut.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlSubOut.setLabelFor(jbutOutput);
        jlSubOut.setText(bundle.getString("GUI.jlSubOut.text")); // NOI18N
        jlSubOut.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jlDelay.setText(bundle.getString("GUI.jlDelay.text")); // NOI18N

        jbutSetLangCa.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jbutSetLangCa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ca.jpg"))); // NOI18N
        jbutSetLangCa.setToolTipText(bundle.getString("GUI.jbutSetLangCa.toolTipText")); // NOI18N
        jbutSetLangCa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbutSetLangCaActionPerformed(evt);
            }
        });

        jbutSetLangEs.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jbutSetLangEs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es.jpg"))); // NOI18N
        jbutSetLangEs.setToolTipText(bundle.getString("GUI.jbutSetLangEs.toolTipText")); // NOI18N
        jbutSetLangEs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbutSetLangEsActionPerformed(evt);
            }
        });

        jbutSetLangEn.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jbutSetLangEn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/en.jpg"))); // NOI18N
        jbutSetLangEn.setToolTipText(bundle.getString("GUI.jbutSetLangEn.toolTipText")); // NOI18N
        jbutSetLangEn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbutSetLangEnActionPerformed(evt);
            }
        });

        jcbAll.setText(bundle.getString("GUI.jcbAll.text")); // NOI18N
        jcbAll.setToolTipText(bundle.getString("GUI.jcbAll.toolTipText")); // NOI18N
        jcbAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbAllActionPerformed(evt);
            }
        });

        jcbInvert.setText(bundle.getString("GUI.jcbInvert.text")); // NOI18N
        jcbInvert.setToolTipText(bundle.getString("GUI.jcbInvert.toolTipText")); // NOI18N
        jcbInvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbInvertActionPerformed(evt);
            }
        });

        jbutSetLangPtBr.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jbutSetLangPtBr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pt_BR.jpg"))); // NOI18N
        jbutSetLangPtBr.setToolTipText(bundle.getString("GUI.jbutSetLangPtBr.toolTipText")); // NOI18N
        jbutSetLangPtBr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbutSetLangPtBrActionPerformed(evt);
            }
        });

        jbutSetLangIt.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jbutSetLangIt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it.jpg"))); // NOI18N
        jbutSetLangIt.setToolTipText(bundle.getString("GUI.jbutSetLangIt.toolTipText")); // NOI18N
        jbutSetLangIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbutSetLangItActionPerformed(evt);
            }
        });

        jcbTrackName.setText(bundle.getString("GUI.jcbTrackName.text")); // NOI18N
        jcbTrackName.setToolTipText(bundle.getString("GUI.jcbTrackName.toolTipText")); // NOI18N

        jtTrackList.setModel(new TableModel(java.util.ResourceBundle.getBundle("Bundle"), true));
        jspTracks.setViewportView(jtTrackList);

        jTabbedPane.addTab(bundle.getString("GUI.jspTracks.TabConstraints.tabTitle"), jspTracks); // NOI18N
        jspTracks.getAccessibleContext().setAccessibleName("");

        jtTargetList.setModel(new TableModel(java.util.ResourceBundle.getBundle("Bundle"), false));
        jspTargets.setViewportView(jtTargetList);

        jlSource.setLabelFor(jcmbSource);
        jlSource.setText(bundle.getString("GUI.jlSource.text")); // NOI18N

        javax.swing.GroupLayout jpTargetsLayout = new javax.swing.GroupLayout(jpTargets);
        jpTargets.setLayout(jpTargetsLayout);
        jpTargetsLayout.setHorizontalGroup(
            jpTargetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTargetsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlSource)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcmbSource, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jspTargets, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jpTargetsLayout.setVerticalGroup(
            jpTargetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTargetsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpTargetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlSource)
                    .addComponent(jcmbSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jspTargets, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
        );

        jlSource.getAccessibleContext().setAccessibleName(bundle.getString("GUI.jlSource.text")); // NOI18N

        jTabbedPane.addTab(bundle.getString("GUI.jpTargets.TabConstraints.tabTitle"), jpTargets); // NOI18N

        jbutSetLangZhHanS.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jbutSetLangZhHanS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/zh_HanS.jpg"))); // NOI18N
        jbutSetLangZhHanS.setToolTipText(bundle.getString("GUI.jbutSetLangZhHanS.toolTipText")); // NOI18N
        jbutSetLangZhHanS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbutSetLangZhHanSActionPerformed(evt);
            }
        });

        jbutSetLangZhHansT.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jbutSetLangZhHansT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/zh_HanT.jpg"))); // NOI18N
        jbutSetLangZhHansT.setToolTipText(bundle.getString("GUI.jbutSetLangZhHansT.toolTipText")); // NOI18N
        jbutSetLangZhHansT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbutSetLangZhHansTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(169, 169, 169)
                                .addComponent(jrbURL, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jrbXML, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jlSubOut)
                                            .addComponent(jlSubIn)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jbutSetLangCa, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jbutSetLangEn, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jbutSetLangEs, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jbutSetLangIt, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jbutSetLangPtBr, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jbutSetLangZhHanS, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(1, 1, 1)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(5, 5, 5)
                                                .addComponent(jbutSetLangZhHansT, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jlDelay)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jspinnerDelay, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jtfInput, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jtfOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jcbAll)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jcbInvert)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jcbTrackName)))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbutInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbutConvert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbutOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTabbedPane))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbURL)
                    .addComponent(jrbXML))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlSubIn)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtfInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jbutInput)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbutOutput)
                    .addComponent(jlSubOut))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jlDelay)
                        .addComponent(jspinnerDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jbutConvert))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jbutSetLangPtBr, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jbutSetLangCa, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jbutSetLangEs, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jbutSetLangEn, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jbutSetLangIt, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addComponent(jbutSetLangZhHanS, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbutSetLangZhHansT, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jcbAll)
                            .addComponent(jcbInvert)
                            .addComponent(jcbTrackName))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                .addGap(1, 1, 1)
                .addComponent(jlStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static java.util.ResourceBundle getBundle() {
        java.util.ResourceBundle b;
        try {
            b = java.util.ResourceBundle.getBundle("Bundle");
        } catch (MissingResourceException e) {
            b = java.util.ResourceBundle.getBundle("Bundle", new java.util.Locale("en"));
        }
        return b;
    }
    
    private void setLanguage (String s) {  
        
        if (s == null)
            bundle = java.util.ResourceBundle.getBundle("Bundle");
        else
            try { bundle = java.util.ResourceBundle.getBundle("Bundle_" + s); }
            catch (Exception e) { bundle = java.util.ResourceBundle.getBundle("Bundle"); }


        if (this.jrbURL.isSelected()) {
            this.jbutInput.setText(bundle.getString("GUI.jbutInput.text"));
            this.jbutInput.setToolTipText(bundle.getString("GUI.jbutInput.toolTipText"));
        } else {
            this.jbutInput.setText(bundle.getString("GUI.jbutInput.xmlfile.text"));
            this.jbutInput.setToolTipText(bundle.getString("GUI.jbutInput.xmlfile.toolTipText"));
        }

        this.jlSubIn.setText(bundle.getString("GUI.jlSubIn.text"));
        this.jlSubOut.setText(bundle.getString("GUI.jlSubOut.text"));
        this.jlDelay.setText(bundle.getString("GUI.jlDelay.text"));
        this.jbutOutput.setText(bundle.getString("GUI.jbutOutput.text"));
        this.jbutOutput.setToolTipText(bundle.getString("GUI.jbutOutput.toolTipText"));
        this.jbutConvert.setText(bundle.getString("GUI.jbutConvert.text"));
        this.jbutConvert.setToolTipText(bundle.getString("GUI.jbutConvert.toolTipText"));
        this.jtfInput.setToolTipText(bundle.getString("GUI.jtfInput.toolTipText"));
        this.jtfOutput.setToolTipText(bundle.getString("GUI.jtfOutput.toolTipText"));
        this.jrbXML.setText(bundle.getString("GUI.jrbXML.text"));
        this.jrbXML.setToolTipText(bundle.getString("GUI.jrbXML.toolTipText"));
        this.jrbURL.setText(bundle.getString("GUI.jrbURL.text"));
        this.jrbURL.setToolTipText(bundle.getString("GUI.jrbURL.toolTipText"));
        this.jspinnerDelay.setToolTipText(bundle.getString("GUI.jspinnerDelay.toolTipText"));
        this.jcbInvert.setText(bundle.getString("GUI.jcbInvert.text"));
        this.jcbInvert.setToolTipText(bundle.getString("GUI.jcbInvert.toolTipText"));
        this.jcbAll.setText(bundle.getString("GUI.jcbAll.text"));
        this.jcbAll.setToolTipText(bundle.getString("GUI.jcbAll.toolTipText"));
        this.jcbTrackName.setText(bundle.getString("GUI.jcbTrackName.text"));
        this.jcbTrackName.setToolTipText(bundle.getString("GUI.jcbTrackName.toolTipText"));
        this.jmiCut.setText(bundle.getString("GUI.jmiCut.text"));
        this.jmiCopy.setText(bundle.getString("GUI.jmiCopy.text"));
        this.jmiPaste.setText(bundle.getString("GUI.jmiPaste.text"));
        this.jTabbedPane.setTitleAt(0, bundle.getString("GUI.jspTracks.TabConstraints.tabTitle"));
        this.jTabbedPane.setTitleAt(1, bundle.getString("GUI.jpTargets.TabConstraints.tabTitle"));
        this.jlSource.setText(bundle.getString("GUI.jlSource.text"));

        //setTableModels(this.tablemodelTracks, this.lSubsWithTranslations.get(0));
        //this.jtLlistaSubtitols.setModel(tablemodelTracks);
        
        Object data[][];
        if (this.tablemodelTracks != null)
            data = this.tablemodelTracks.getData();
        else
            data = null;
        this.tablemodelTracks = new TableModel(bundle, true);
        if (!islSubsWithTranslationsNull()) {
            List<NetSubtitle> _lSubs = this.lSubsWithTranslations.get(0);
            if (_lSubs != null)
            {
                if (data != null)
                    this.tablemodelTracks.init(_lSubs, data);
                else
                    this.tablemodelTracks.init(_lSubs);
            }
            
        }
        this.jtTrackList.setModel(tablemodelTracks);
        
        
        //setTableModels(this.tablemodelTargets, this.lSubsWithTranslations.get(1));
        //this.jtLlistaSubtitols.setModel(tablemodelTracks);
        
        Object dataTargets[][];
        if (this.tablemodelTargets != null)
            dataTargets = this.tablemodelTargets.getData();
        else
            dataTargets = null;
        this.tablemodelTargets = new TableModel(bundle, false);
        if (!islSubsWithTranslationsNull()) {
            List<NetSubtitle> _lSubs = this.lSubsWithTranslations.get(1);
            if (_lSubs != null)
            {
                if (dataTargets != null)
                    this.tablemodelTargets.init(_lSubs, dataTargets);
                else
                    this.tablemodelTargets.init(_lSubs);
            }
            
        }
        
        this.jtTargetList.setModel(tablemodelTargets);

    }
    
    private boolean islSubsWithTranslationsNull()
    {
        List<List<NetSubtitle>> swt = this.lSubsWithTranslations;
        return (swt == null || swt.size() < 2 ||
                swt.get(0) == null ||  swt.get(0).isEmpty() ||
                swt.get(1) == null ||  swt.get(1).isEmpty());
    }
     
    
    private void jbutConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbutConvertActionPerformed
        
        new Thread(new Runnable() {
            public void run() {
                convertSubtitles();
            }
        }).start();
        
    }//GEN-LAST:event_jbutConvertActionPerformed

    private void jbutInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbutInputActionPerformed
        int returnVal;
        
        if (this.jrbXML.isSelected()) { // Method: XML file
            returnVal = fc1.showOpenDialog(this.getParent());
            if (returnVal == JFileChooser.APPROVE_OPTION)
                jtfInput.setText(fc1.getSelectedFile().getAbsolutePath());
        } else { // Method: URL
            //retrieveSubtitles();
            
            this.enableControls(false);
            new Thread(new Runnable() {
                public void run() {
                    retrieveSubtitles();
                }
            }).start();
            
        }
    }//GEN-LAST:event_jbutInputActionPerformed
    
    private void jbutOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbutOutputActionPerformed
        int returnVal;
                
        returnVal = fc2.showSaveDialog(this.getParent());
        if (returnVal == JFileChooser.APPROVE_OPTION)
            jtfOutput.setText(fc2.getSelectedFile().getAbsolutePath());
    }//GEN-LAST:event_jbutOutputActionPerformed

    private void jbutSetLangCaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbutSetLangCaActionPerformed
        this.setLanguage("ca");
}//GEN-LAST:event_jbutSetLangCaActionPerformed

    private void jbutSetLangEsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbutSetLangEsActionPerformed
        this.setLanguage("es");
    }//GEN-LAST:event_jbutSetLangEsActionPerformed

    private void jbutSetLangEnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbutSetLangEnActionPerformed
        this.setLanguage("en");
    }//GEN-LAST:event_jbutSetLangEnActionPerformed

private void jtfInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfInputFocusGained
    this.jtfInput.selectAll();
}//GEN-LAST:event_jtfInputFocusGained

private void jcbInvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbInvertActionPerformed
    int i;
    Object data[][];
    
    if (this.jTabbedPane.getSelectedIndex() == 0) // Normal tracks
    {
        this.jcbInvert.setSelected(false);
        data = this.tablemodelTracks.getData();
        if (data == null) return;
        for (i = 0; i < data.length; i++)
            data[i][0] = !((Boolean) data[i][0]).booleanValue();
        this.tablemodelTracks = new TableModel(bundle, true);
        this.tablemodelTracks.init(lSubsWithTranslations.get(0), data);
        this.jtTrackList.setModel(tablemodelTracks);
        }
    else if (this.jTabbedPane.getSelectedIndex() == 1)
    {
        this.jcbInvert.setSelected(false);
        data = this.tablemodelTargets.getData();
        if (data == null) return;
        for (i = 0; i < data.length; i++)
            data[i][0] = !((Boolean) data[i][0]).booleanValue();
        this.tablemodelTargets = new TableModel(bundle, false);
        this.tablemodelTargets.init(lSubsWithTranslations.get(1), data);
        this.jtTargetList.setModel(tablemodelTargets);
    }
}//GEN-LAST:event_jcbInvertActionPerformed

private void jcbAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbAllActionPerformed
    int i;
    Object data[][];

    if (this.jTabbedPane.getSelectedIndex() == 0) // Normal tracks
    {
        data = this.tablemodelTracks.getData();
        if (data == null) return;
        for (i = 0; i < data.length; i++)
            data[i][0] = this.jcbAll.isSelected();
        this.tablemodelTracks = new TableModel(bundle, true);
        this.tablemodelTracks.init(lSubsWithTranslations.get(0), data);
        this.jtTrackList.setModel(tablemodelTracks);
    }
    else if (this.jTabbedPane.getSelectedIndex() == 1) // Translated tracks (targets)
    {
        data = this.tablemodelTargets.getData();
        if (data == null) return;
        for (i = 0; i < data.length; i++)
            data[i][0] = this.jcbAll.isSelected();
        this.tablemodelTargets = new TableModel(bundle, false);
        this.tablemodelTargets.init(lSubsWithTranslations.get(1), data);
        this.jtTargetList.setModel(tablemodelTargets);
    }
}//GEN-LAST:event_jcbAllActionPerformed

private void jrbURLItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbURLItemStateChanged

    if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
        defaultFile = this.jtfInput.getText();
        this.jtfInput.setText(defaultURL);

        this.jbutInput.setText(bundle.getString("GUI.jbutInput.text"));
        this.jbutInput.setToolTipText(bundle.getString("GUI.jbutInput.toolTipText"));
    }
}//GEN-LAST:event_jrbURLItemStateChanged

private void jrbXMLItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbXMLItemStateChanged

    if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
        this.lSubsWithTranslations = new Vector<List<NetSubtitle>>(); this.lSubsWithTranslations.add(new Vector<NetSubtitle>()); this.lSubsWithTranslations.add(new Vector<NetSubtitle>());
        defaultURL = this.jtfInput.getText();
        this.jtfInput.setText(defaultFile);

        this.jbutInput.setText(bundle.getString("GUI.jbutInput.xmlfile.text"));
        this.jbutInput.setToolTipText(bundle.getString("GUI.jbutInput.xmlfile.toolTipText"));
    }
}//GEN-LAST:event_jrbXMLItemStateChanged

private void jtfInputMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtfInputMousePressed

    if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
        this.jtfInput.requestFocusInWindow();
    }

}//GEN-LAST:event_jtfInputMousePressed

private void jtfOutputMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtfOutputMousePressed

    if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
        this.jtfOutput.requestFocusInWindow();
    }
    
}//GEN-LAST:event_jtfOutputMousePressed

private void jbutSetLangPtBrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbutSetLangPtBrActionPerformed
    this.setLanguage("pt_BR");
}//GEN-LAST:event_jbutSetLangPtBrActionPerformed

    private void jbutSetLangItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbutSetLangItActionPerformed
        this.setLanguage("it");
    }//GEN-LAST:event_jbutSetLangItActionPerformed

    private void jbutSetLangZhHanSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbutSetLangZhHanSActionPerformed
        this.setLanguage("zh_HanS");
    }//GEN-LAST:event_jbutSetLangZhHanSActionPerformed

    private void jbutSetLangZhHansTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbutSetLangZhHansTActionPerformed
        this.setLanguage("zh_HanT");
    }//GEN-LAST:event_jbutSetLangZhHansTActionPerformed


    
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    
    private void showMsgInfileInvalidFormat() {
        String msg;
        
        msg = bundle.getString("msg.infile.invalid.format");
        jtfInput.requestFocusInWindow();
        javax.swing.JOptionPane.showMessageDialog(null, msg);
    }
    
    public void setMsgInfileInvalidFormat() {
        this.msgInfileInvalidFormat = true;
    }

    private void showMsgIOException() {
        String msg;

        msg = bundle.getString("msg.io.error");
        jtfInput.requestFocusInWindow();
        javax.swing.JOptionPane.showMessageDialog(null, msg);
    }
    
    public void setMsgIOException() {
        this.msgIOException = true;
    }
    
    public void msgFileNoSubtitles() {
        String msg;

        msg = bundle.getString("msg.infile.no.subtitles.found");
        jtfInput.requestFocusInWindow();
        javax.swing.JOptionPane.showMessageDialog(null, msg);
    }

    public void msgConversionOk() {
        String msg;

        msg = bundle.getString("msg.conversion.done.ok");
        jtfInput.requestFocusInWindow();
        javax.swing.JOptionPane.showMessageDialog(null, msg);
    }
    
    public void msgConversionFinished() { // conversion finished (either successfully or not)
        String msg;

        msg = bundle.getString("msg.conversion.finished");
        jtfInput.requestFocusInWindow();
        javax.swing.JOptionPane.showMessageDialog(null, msg);
    }
    
    public void msgConversioErrors() {
        String msg;

        msg = bundle.getString("msg.conversion.done.error");
        jtfInput.requestFocusInWindow();
        javax.swing.JOptionPane.showMessageDialog(null, msg);
    }
    
    public void prepareNewConversion() {
        this.enableControls(true);
        this.jlStatus.setText("");
        
        if (this.msgIOException) this.showMsgIOException();
        if (this.msgInfileInvalidFormat) this.showMsgInfileInvalidFormat();
        
        this.msgIOException = false;
        this.msgInfileInvalidFormat = false;
    }
    
    public void enableControls(boolean enable)
    {
        this.jbutConvert.setEnabled(enable);
        this.jbutInput.setEnabled(enable);
        this.jbutOutput.setEnabled(enable);
        this.jrbURL.setEnabled(enable);
        this.jrbXML.setEnabled(enable);
        this.jcbAll.setEnabled(enable);
        this.jcbInvert.setEnabled(enable);
        this.jcbTrackName.setEnabled(enable);
        this.jcmbSource.setEnabled(enable);
        this.jtfInput.setEnabled(enable);
        this.jtfOutput.setEnabled(enable);
        this.jspinnerDelay.setEnabled(enable);
        this.jtTrackList.setEnabled(enable);
        this.jtTargetList.setEnabled(enable);
    }

    public void retrieveSubtitles() {
        String msg;
        
        this.lSubsWithTranslations = new Vector<List<NetSubtitle>>();
        this.lSubsWithTranslations.add(new Vector<NetSubtitle>());
        this.lSubsWithTranslations.add(new Vector<NetSubtitle>());
        
        this.jcbAll.setSelected(false);

       // Check if URL is valid
        try {
            this.jlStatus.setText(bundle.getString("msg.status.connecting"));
            lSubsWithTranslations = Network.getSubtitlesWithTranslations(this.jtfInput.getText());
            this.jlStatus.setText("");
        } catch (Network.HostNoGV e) {
            msg = bundle.getString("msg.url.unknown.host");
            jtfInput.requestFocusInWindow();
            javax.swing.JOptionPane.showMessageDialog(null, msg);
            prepareNewConversion();
            return;
        } catch (Network.NoDocId e) {
            msg = bundle.getString("msg.url.parameter.docid.not.found");
            jtfInput.requestFocusInWindow();
            javax.swing.JOptionPane.showMessageDialog(null, msg);
            prepareNewConversion();
            return;
        } catch (Network.NoQuery e) {
            msg = bundle.getString("msg.url.parameter.not.found");
            jtfInput.requestFocusInWindow();
            javax.swing.JOptionPane.showMessageDialog(null, msg);
            prepareNewConversion();
            return;
        } catch (Network.InvalidDocId e) {
            msg = bundle.getString("msg.url.parameter.docid.invalid");
            jtfInput.requestFocusInWindow();
            javax.swing.JOptionPane.showMessageDialog(null, msg);
            prepareNewConversion();
            return;
        } catch (Network.NoSubs e) {
            this.msgFileNoSubtitles();
            prepareNewConversion();
            return;
        } catch (MalformedURLException e) {
            msg = bundle.getString("msg.url.invalid.format");
            jtfInput.requestFocusInWindow();
            javax.swing.JOptionPane.showMessageDialog(null, msg);
            prepareNewConversion();
            return;
        } catch (org.jdom.input.JDOMParseException e) {
            msg = bundle.getString("msg.url.unexpected.format");
            jtfInput.requestFocusInWindow();
            javax.swing.JOptionPane.showMessageDialog(null, msg);
            prepareNewConversion();
            return;
        } catch (java.net.UnknownHostException e) {
            msg = bundle.getString("msg.net.unknown.host");
            jtfInput.requestFocusInWindow();
            javax.swing.JOptionPane.showMessageDialog(null, msg);
            prepareNewConversion();
            return;
        } catch (java.io.FileNotFoundException e) {
            msg = bundle.getString("msg.url.does.not.exist");
            jtfInput.requestFocusInWindow();
            javax.swing.JOptionPane.showMessageDialog(null, msg);
            prepareNewConversion();
        } catch (Network.NoYouTubeParamV e)
        {
            msg = bundle.getString("msg.net.missing.video.param");
            jtfInput.requestFocusInWindow();
            javax.swing.JOptionPane.showMessageDialog(null, msg);
            prepareNewConversion();
        } catch (Exception e) {
            msg = bundle.getString("msg.unknown.error");
            jtfInput.requestFocusInWindow();
            javax.swing.JOptionPane.showMessageDialog(null, msg);
            prepareNewConversion();
            return;
        }
        
        // No problems found. Let's populate the GUI
        this.tablemodelTracks = new TableModel(bundle, true);
        this.jcmbSource.removeAllItems();
        
        if (!islSubsWithTranslationsNull()) {
            Object data[][];
            data = this.tablemodelTracks.getData();
            if (data != null)
                this.tablemodelTracks.init(lSubsWithTranslations.get(0), data);
            else
                this.tablemodelTracks.init(lSubsWithTranslations.get(0));
            
            for (NetSubtitle _ns : lSubsWithTranslations.get(0))
                this.jcmbSource.addItem(_ns);
        }
        this.jtTrackList.setModel(this.tablemodelTracks);
        
        
        this.tablemodelTargets = new TableModel(bundle, false);
        if (!islSubsWithTranslationsNull()) {
            Object data[][];
            data = this.tablemodelTargets.getData();
            if (data != null)
                this.tablemodelTargets.init(lSubsWithTranslations.get(1), data);
            else
                this.tablemodelTargets.init(lSubsWithTranslations.get(1));
        }
        this.jtTargetList.setModel(this.tablemodelTargets);
        
        
        prepareNewConversion();

    }

    public void convertSubtitles()
    {
        String msg;
        InputStreamReader input = null;
        Converter conv;
        boolean atLeastOneIsSelected = false;
        Object data[][];
        String fileName, s;
        
        // Disable certain controls to avoid user interaction
        this.enableControls(false);
        
        if (! this.jrbURL.isSelected()) { // Source: XML file
            if ("".equals(jtfInput.getText())) {
                msg = bundle.getString("msg.infile.not.specified");
                javax.swing.JOptionPane.showMessageDialog(null, msg);
                jtfInput.requestFocusInWindow();
                prepareNewConversion();
                return;
            }
            try {
                input = new InputStreamReader(new FileInputStream(jtfInput.getText()), "UTF-8");
            } catch (FileNotFoundException ex) {
                this.setMsgIOException();
                prepareNewConversion();
                return;
            } catch (java.io.UnsupportedEncodingException ex) {
                System.out.println("(DEBUG) encoding not supported");
            }
        } else { // Source: Network
            if (islSubsWithTranslationsNull()) {
                retrieveSubtitles();
                return;
            }
        }
        
        if ("".equals(jtfOutput.getText())) {
            msg = bundle.getString("msg.outfile.not.specified");
            javax.swing.JOptionPane.showMessageDialog(null, msg);
            jtfOutput.requestFocusInWindow();
            prepareNewConversion();
            return;
        }

        msg = bundle.getString("msg.status.converting");
        this.jlStatus.setText(msg);
        
        if (input != null && islSubsWithTranslationsNull()) { // Source: XML file
            conv = new Converter(this,
                    input,
                    jtfOutput.getText(),
                    ((Double)jspinnerDelay.getValue()).doubleValue());
            conv.run();
            prepareNewConversion();
            msgConversionFinished();
        } else if (!islSubsWithTranslationsNull()) { // Source: Network

            
            int tabSelected = this.jTabbedPane.getSelectedIndex();
            boolean fewSubsSkipped = false;

            if (tabSelected == 0) { // Normal tracks
                data = this.tablemodelTracks.getData();
                List<NetSubtitle> _lSubs = this.lSubsWithTranslations.get(0);
                
                for (int i = 0; i < data.length; i++) {
                    
                    if (((Boolean) data[i][0]).booleanValue()) {
                        atLeastOneIsSelected = true;
                        try {
                            // When handling tracks, it is worth to try signature method FOR EACH track,
                            // even when a previous track retrieval via signature method failed
                            if (Network.getMagicURL().isEmpty()) throw new Exception("No *Magic* URL!");
                            Network.setMethod(NetSubtitle.Method.YouTubeSignature);
                            input = Network.readURL(_lSubs.get(i).getTrackURL());
                        } catch (Exception ex1) {
                            System.out.println("(DEBUG) URL could not be read via Signature method...");
                            System.out.println(
                                String.format("(DEBUG) Method=%s, Type=%s, ID=%s, IDXML=%s, Lang=%s, Name=%s, Exception message='%s'",
                                    Network.getMethod(),
                                    _lSubs.get(i).getType(),
                                    _lSubs.get(i).getId(),
                                    _lSubs.get(i).getIdXML(),
                                    _lSubs.get(i).getLang(),
                                    _lSubs.get(i).getName(),
                                    ex1.getMessage()));
                            
                            if (_lSubs.get(i).getType() == NetSubtitle.Tipus.YouTubeASRTrack)
                            {
                                // YouTube ASR cannot be retrieved by using Legacy method.
                                System.out.println("(DEBUG) YouTube ASR cannot be retrieved via Legacy method. Operation partially aborted.");
                                System.out.println(
                                    String.format("(DEBUG) Method=%s, Type=%s, ID=%s, IDXML=%s, Lang=%s, Name=%s",
                                        Network.getMethod(),
                                        _lSubs.get(i).getType(),
                                        _lSubs.get(i).getId(),
                                        _lSubs.get(i).getIdXML(),
                                        _lSubs.get(i).getLang(),
                                        _lSubs.get(i).getName()));

                                fewSubsSkipped = true;
                                continue;
                            } else if (_lSubs.get(i).getType() == NetSubtitle.Tipus.YouTubeTrack)
                            {
                                // A YouTube track/target can be retrieved by using legacy method.
                                // However, GUI should not reach this point with a target
                                System.out.println("(DEBUG) Switching to YouTube Legacy mode and retrying...");
                                Network.setMethod(NetSubtitle.Method.YouTubeLegacy);

                                try
                                {
                                    input = Network.readURL(_lSubs.get(i).getTrackURL(NetSubtitle.Method.YouTubeLegacy));
                                } catch (Exception ex2) {
                                    System.out.println("(DEBUG) URL could not be read with Legacy method. Operation partially aborted");
                                    System.out.println(
                                        String.format("(DEBUG) Method=%s, Type=%s, ID=%s, IDXML=%s, Lang=%s, Name=%s, Exception message='%s'",
                                            Network.getMethod(),
                                            _lSubs.get(i).getType(),
                                            _lSubs.get(i).getId(),
                                            _lSubs.get(i).getIdXML(),
                                            _lSubs.get(i).getLang(),
                                            _lSubs.get(i).getName(),
                                            ex2.getMessage()));

                                    fewSubsSkipped = true;
                                    continue;
                                }
                            } else 
                            {
                                // YouTube Target should not reach this point due to GUI.
                                // Google Track should not reach this point.
                                System.out.println("(DEBUG) Entered wrong section of code. Unexpected result.");
                                fewSubsSkipped = true;
                                continue;
                            }
                        }
                        
                        fileName = "_" + _lSubs.get(i).getId();
                        fileName += "_" + _lSubs.get(i).getIdXML();

                        if (jcbTrackName.isSelected()) {
                            s = _lSubs.get(i).getName();
                            if (s != null)
                                fileName += "_" + s;
                        }
                        
                        s = _lSubs.get(i).getLang();
                        if (s != null)
                            fileName += "_" + s;

                        fileName += ".srt";
                        

                        conv = new Converter(
                            this,
                            input,
                            Common.removeExtension(jtfOutput.getText()) + fileName,
                            ((Double)jspinnerDelay.getValue()).doubleValue());
                        if (!conv.run()) 
                        {
                            // Conversion failed
                            // If Signature method was used and type is Track, let's retry
                            // Otherwise, operation is partially aborted
                            if (Network.getMethod() == NetSubtitle.Method.YouTubeSignature && 
                                    _lSubs.get(i).getType() == NetSubtitle.Tipus.YouTubeTrack)
                            {
                                // A YouTube track/target can be retrieved by using legacy method.
                                System.out.println("(DEBUG) Switching to YouTube Legacy mode and retrying...");
                                Network.setMethod(NetSubtitle.Method.YouTubeLegacy);

                                try
                                {
                                    input = Network.readURL(_lSubs.get(i).getTrackURL(NetSubtitle.Method.YouTubeLegacy));
                                } catch (Exception ex1) {
                                    System.out.println("(DEBUG) URL could not be read with Legacy method. Operation partially aborted");
                                    System.out.println(
                                        String.format("(DEBUG) Method=%s, Type=%s, ID=%s, IDXML=%s, Lang=%s, Name=%s, Exception message='%s'",
                                            Network.getMethod(),
                                            _lSubs.get(i).getType(),
                                            _lSubs.get(i).getId(),
                                            _lSubs.get(i).getIdXML(),
                                            _lSubs.get(i).getLang(),
                                            _lSubs.get(i).getName(),
                                            ex1.getMessage()));

                                    fewSubsSkipped = true;
                                    continue;
                                }
                                
                                conv = new Converter(
                                    this,
                                    input,
                                    Common.removeExtension(jtfOutput.getText()) + fileName,
                                    ((Double)jspinnerDelay.getValue()).doubleValue());
                                
                                conv.run();
                            }
                        }
                    }

                }
                if (! atLeastOneIsSelected) { // there is no selection
                    prepareNewConversion();
                    msg = bundle.getString("msg.sublist.none.selected");
                    javax.swing.JOptionPane.showMessageDialog(null, msg);
                } else { // there is selection and the process ended (either successfully or not)
                    prepareNewConversion();
                    
                    if (fewSubsSkipped) {
                        msg = bundle.getString("msg.io.cc.unreadable");
                        javax.swing.JOptionPane.showMessageDialog(null, msg);
                    } else
                    {
                        msgConversionFinished();
                    }
                }
            } else if (tabSelected == 1) { // Translated tracks (target)
                data = this.tablemodelTargets.getData();
                List<NetSubtitle> _lSubs = this.lSubsWithTranslations.get(1);
                
                NetSubtitle srcLang = (NetSubtitle)this.jcmbSource.getSelectedItem();
                
                // If the source is an ASR track and we cannot use Signature method, operation must be completely aborted
                if (srcLang.getType() == NetSubtitle.Tipus.YouTubeASRTrack && Network.getMagicURL().isEmpty())
                {
                    System.out.println("(DEBUG) YouTube ASR cannot be retrieved via Legacy method. Operation completely aborted.");
                    System.out.println(
                        String.format("(DEBUG) [SOURCE] Method=%s, Type=%s, ID=%s, IDXML=%s, Lang=%s, Name=%s",
                            Network.getMethod(),
                            srcLang.getType(),
                            srcLang.getId(),
                            srcLang.getIdXML(),
                            srcLang.getLang(),
                            srcLang.getName()));

                    msg = bundle.getString("msg.io.asr.unreadable");
                    javax.swing.JOptionPane.showMessageDialog(null, msg);
                    prepareNewConversion();
                    return;
                }
                
                for (int i = 0; i < data.length; i++) {

                    if (((Boolean) data[i][0]).booleanValue()) {
                        atLeastOneIsSelected = true;
                        try {
                            // When handling targets, it is worth to try signature method FOR EACH target,
                            // even when a previous track retrieval via signature method failed
                            // ASR source has already been discarded if *Magic* URL was not available
                            
                            if (Network.getMagicURL().isEmpty()) throw new Exception("No *Magic* URL!");
                            Network.setMethod(NetSubtitle.Method.YouTubeSignature);
                            input = Network.readURL(_lSubs.get(i).getTargetURL(srcLang));
                        } catch (Exception ex1) {
                            System.out.println("(DEBUG) URL could not be read... ");
                            System.out.println(
                                String.format("(DEBUG) [TARGET] Method=%s, Type=%s, ID=%s, IDXML=%s, Lang=%s, Name=%s, Exception message='%s'",
                                    Network.getMethod(),
                                    _lSubs.get(i).getType(),
                                    _lSubs.get(i).getId(),
                                    _lSubs.get(i).getIdXML(),
                                    _lSubs.get(i).getLang(),
                                    _lSubs.get(i).getName(),
                                    ex1.getMessage()));
                            

                            if (srcLang.getType() == NetSubtitle.Tipus.YouTubeASRTrack)
                            {
                                // YouTube ASR targets cannot be retrieved by using Legacy method.
                                System.out.println("(DEBUG) YouTube targets translated from ASR cannot be retrieved via Legacy method. Operation partially aborted.");
                                System.out.println(
                                    String.format("(DEBUG) [TARGET] Method=%s, Type=%s, ID=%s, IDXML=%s, Lang=%s, Name=%s",
                                        Network.getMethod(),
                                        _lSubs.get(i).getType(),
                                        _lSubs.get(i).getId(),
                                        _lSubs.get(i).getIdXML(),
                                        _lSubs.get(i).getLang(),
                                        _lSubs.get(i).getName()));

                                fewSubsSkipped = true;
                                continue;
                            } else if (srcLang.getType() == NetSubtitle.Tipus.YouTubeTrack)
                            {
                                // NOTE: In order if it is worth to use legacy mode, we check the SOURCE (ASR or normal track)
                                // A YouTube track/target can be retrieved by using legacy method.
                                System.out.println("(DEBUG) Switching to YouTube Legacy mode and retrying...");
                                Network.setMethod(NetSubtitle.Method.YouTubeLegacy);

                                try
                                {
                                    input = Network.readURL(_lSubs.get(i).getTargetURL(NetSubtitle.Method.YouTubeLegacy, srcLang));
                                } catch (Exception ex2) {
                                    System.out.println("(DEBUG) URL could not be read with legacy method. Operation partially aborted");
                                    System.out.println(
                                        String.format("(DEBUG) [TARGET] Method=%s, Type=%s, ID=%s, IDXML=%s, Lang=%s, Name=%s, Exception message='%s'",
                                            Network.getMethod(),
                                            _lSubs.get(i).getType(),
                                            _lSubs.get(i).getId(),
                                            _lSubs.get(i).getIdXML(),
                                            _lSubs.get(i).getLang(),
                                            _lSubs.get(i).getName(),
                                            ex2.getMessage()));
                                    fewSubsSkipped = true;
                                    continue;
                                }
                            } else
                            {
                                // YouTube Track should not reach this point due to GUI.
                                // Google Track should not reach this point.
                                System.out.println("(DEBUG) Entered wrong section of code. Unexpected result.");
                                fewSubsSkipped = true;
                                continue;
                            }
                        }
                        
                        fileName = "_" + srcLang.getId();
                        fileName += "_" + _lSubs.get(i).getIdXML();
                        
                        s = _lSubs.get(i).getLang();
                        if (s != null)
                            fileName += "_" + s;
                        
                        
                        fileName += "_" + srcLang.getIdXML();
                        
                        if (jcbTrackName.isSelected()) {
                            s = srcLang.getName();
                            if (s != null)
                                fileName += "_" + s;
                        }
                        
                        s = srcLang.getLang();
                        if (s != null)
                            fileName += "_" + s;

                        fileName += ".srt";

                        conv = new Converter(
                            this,
                            input,
                            Common.removeExtension(jtfOutput.getText()) + fileName,
                            ((Double)jspinnerDelay.getValue()).doubleValue());

                        if (!conv.run()) 
                        {
                            // Conversion failed
                            // If Signature method was used and SOURCE type is Track, let's retry
                            // Otherwise, operation is partially aborted
                            if (Network.getMethod() == NetSubtitle.Method.YouTubeSignature && 
                                    srcLang.getType() == NetSubtitle.Tipus.YouTubeTrack)
                            {
                                // A YouTube track/target can be retrieved by using legacy method.
                                System.out.println("(DEBUG) Switching to YouTube Legacy mode and retrying...");
                                Network.setMethod(NetSubtitle.Method.YouTubeLegacy);

                                try
                                {
                                    input = Network.readURL(_lSubs.get(i).getTargetURL(NetSubtitle.Method.YouTubeLegacy, srcLang));
                                } catch (Exception ex1) {
                                    System.out.println("(DEBUG) URL could not be read with Legacy method. Operation partially aborted");
                                    System.out.println(
                                        String.format("(DEBUG) Method=%s, Type=%s, ID=%s, IDXML=%s, Lang=%s, Name=%s, Exception message='%s'",
                                            Network.getMethod(),
                                            _lSubs.get(i).getType(),
                                            _lSubs.get(i).getId(),
                                            _lSubs.get(i).getIdXML(),
                                            _lSubs.get(i).getLang(),
                                            _lSubs.get(i).getName(),
                                            ex1.getMessage()));

                                    fewSubsSkipped = true;
                                    continue;
                                }
                                
                                conv = new Converter(
                                    this,
                                    input,
                                    Common.removeExtension(jtfOutput.getText()) + fileName,
                                    ((Double)jspinnerDelay.getValue()).doubleValue());
                                
                                conv.run();
                            }
                        }
                    }

                }
                if (! atLeastOneIsSelected) { // there is no selection
                    prepareNewConversion();
                    msg = bundle.getString("msg.sublist.none.selected");
                    javax.swing.JOptionPane.showMessageDialog(null, msg);
                } else { // there is selection and the process ended (successfully or not)
                    
                    prepareNewConversion();
                    
                    if (fewSubsSkipped) {
                        msg = bundle.getString("msg.io.cc.unreadable");
                        javax.swing.JOptionPane.showMessageDialog(null, msg);
                    } else
                    {
                        msgConversionFinished();
                    }
                }
                
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JButton jbutConvert;
    private javax.swing.JButton jbutInput;
    private javax.swing.JButton jbutOutput;
    private javax.swing.JButton jbutSetLangCa;
    private javax.swing.JButton jbutSetLangEn;
    private javax.swing.JButton jbutSetLangEs;
    private javax.swing.JButton jbutSetLangIt;
    private javax.swing.JButton jbutSetLangPtBr;
    private javax.swing.JButton jbutSetLangZhHanS;
    private javax.swing.JButton jbutSetLangZhHansT;
    private javax.swing.JCheckBox jcbAll;
    private javax.swing.JCheckBox jcbInvert;
    private javax.swing.JCheckBox jcbTrackName;
    private javax.swing.JComboBox jcmbSource;
    private javax.swing.JLabel jlDelay;
    private javax.swing.JLabel jlSource;
    private javax.swing.JLabel jlStatus;
    private javax.swing.JLabel jlSubIn;
    private javax.swing.JLabel jlSubOut;
    private javax.swing.JMenuItem jmiCopy;
    private javax.swing.JMenuItem jmiCut;
    private javax.swing.JMenuItem jmiPaste;
    private javax.swing.JPanel jpTargets;
    private javax.swing.JPopupMenu jpmContextual;
    private javax.swing.JRadioButton jrbURL;
    private javax.swing.JRadioButton jrbXML;
    private javax.swing.JScrollPane jspTargets;
    private javax.swing.JScrollPane jspTracks;
    private javax.swing.JSpinner jspinnerDelay;
    private javax.swing.JTable jtTargetList;
    private javax.swing.JTable jtTrackList;
    private javax.swing.JTextField jtfInput;
    private javax.swing.JTextField jtfOutput;
    private javax.swing.ButtonGroup subsSource;
    // End of variables declaration//GEN-END:variables
    
}
